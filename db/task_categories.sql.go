// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: task_categories.sql

package db

import (
	"context"
)

const addTaskCategory = `-- name: AddTaskCategory :exec
INSERT INTO task_categories (task_id, category_id)
VALUES ($1, $2)
`

type AddTaskCategoryParams struct {
	TaskID     int32
	CategoryID int32
}

func (q *Queries) AddTaskCategory(ctx context.Context, arg AddTaskCategoryParams) error {
	_, err := q.db.ExecContext(ctx, addTaskCategory, arg.TaskID, arg.CategoryID)
	return err
}

const getCategoriesForTask = `-- name: GetCategoriesForTask :many
SELECT c.id, c.name
FROM categories c
JOIN task_categories tc ON c.id = tc.category_id
WHERE tc.task_id = $1
`

func (q *Queries) GetCategoriesForTask(ctx context.Context, taskID int32) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getCategoriesForTask, taskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTasksForCategory = `-- name: GetTasksForCategory :many
SELECT t.id, t.title, t.description, t.status, t.priority, t.due_date, t.user_id
FROM tasks t
JOIN task_categories tc ON t.id = tc.task_id
WHERE tc.category_id = $1
`

func (q *Queries) GetTasksForCategory(ctx context.Context, categoryID int32) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasksForCategory, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.DueDate,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeTaskCategory = `-- name: RemoveTaskCategory :exec
DELETE FROM task_categories
WHERE task_id = $1 AND category_id = $2
`

type RemoveTaskCategoryParams struct {
	TaskID     int32
	CategoryID int32
}

func (q *Queries) RemoveTaskCategory(ctx context.Context, arg RemoveTaskCategoryParams) error {
	_, err := q.db.ExecContext(ctx, removeTaskCategory, arg.TaskID, arg.CategoryID)
	return err
}
