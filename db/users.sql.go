// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (username, password_hash, role)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateUserParams struct {
	Username     string
	PasswordHash string
	Role         sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Username, arg.PasswordHash, arg.Role)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, role
FROM users
WHERE id = $1
`

type GetUserByIDRow struct {
	ID       int32
	Username string
	Role     sql.NullString
}

func (q *Queries) GetUserByID(ctx context.Context, id int32) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(&i.ID, &i.Username, &i.Role)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET username = $1, password_hash = $2, role = $3
WHERE id = $4
RETURNING id
`

type UpdateUserParams struct {
	Username     string
	PasswordHash string
	Role         sql.NullString
	ID           int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Username,
		arg.PasswordHash,
		arg.Role,
		arg.ID,
	)
	return err
}
